package course1;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Week2_CountInversions 
{

    // Method to merge two halves of the array and count inversions
    public static int mergeAndCount(int[] arr, int[] temp, int left, int mid, int right) 
    {
        int inversions = 0;
        int i = left;    // Starting index for left subarray
        int j = mid;     // Starting index for right subarray
        int k = left;    // Starting index to be sorted

        // Merge the two halves while counting inversions
        while (i < mid && j <= right) 
        {
            if (arr[i] <= arr[j]) 
            {
                temp[k++] = arr[i++];
            } else 
            {
                temp[k++] = arr[j++];
                inversions += (mid - i); // Count inversions
            }
        }

        // Copy the remaining elements of the left subarray, if any
        while (i < mid) 
        {
            temp[k++] = arr[i++];
        }

        // Copy the remaining elements of the right subarray, if any
        while (j <= right) 
        {
            temp[k++] = arr[j++];
        }

        // Copy the sorted subarray into Original array
        for (i = left; i <= right; i++) 
        {
            arr[i] = temp[i];
        }

        return inversions;
    }

    // Method to sort the array and count inversions using merge sort
    public static int countInversions(int[] arr, int[] temp, int left, int right) 
    {
        int inversions = 0;
        if (right > left) 
        {
            int mid = (right + left) / 2;

            // Recursively count inversions in the left subarray
            inversions += countInversions(arr, temp, left, mid);

            // Recursively count inversions in the right subarray
            inversions += countInversions(arr, temp, mid + 1, right);

            // Merge the two halves and count cross inversions
            inversions += mergeAndCount(arr, temp, left, mid + 1, right);
        }
        return inversions;
    }

    public static void main(String[] args) 
    {
        int arrSize = 100000;
        int[] arr = new int[arrSize];

        // Read data from file
        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\rajuv\\eclipse-workspace\\StanfordCourseProgrammingAssignments\\src\\course1\\IntegerArray.txt"))) 
        {
            String line;
            int i = 0;
            while ((line = br.readLine()) != null) 
            {
                arr[i++] = Integer.parseInt(line);
            }
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }

        int[] temp = new int[arrSize];

        // Print the number of inversions in the array
        System.out.println(countInversions(arr, temp, 0, arrSize - 1));
    }
<<<<<<< HEAD
}
=======
}
>>>>>>> 2c8347e8a5ff047ec742e3d1dd982c84e33796d0
